# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.28.7"

default_platform :ios

platform :ios do
    before_all do
        
    end
    
    desc "Bumps build number and runs unit tests on each push to development branch"
    desc "If successful, pushes the bumped version to git"
    lane :development do
        ensure_git_branch(branch: ENV["DEVELOPMENT_BRANCH"])
        ensure_git_status_clean
        
        update_graph
        update_app_icon
        
        bump_build_number
        
        run_unit_tests
        
        clean_build_artifacts
        
        push_to_git_remote
        
        notify_slack_dev_success
        
        testflight_beta
    end
    
    
    
    
    desc "Runs all the tests"
    lane :run_unit_tests do
        ws = ENV["CLIENT_WORKSPACE"]
        UI.message("CLIENT_WORKSPACE #{ws}")
        scan(
             workspace: ENV["CLIENT_WORKSPACE"],
             scheme: ENV["UNIT_TEST_SCHEME"]
             )
             
             UI.success("====> TESTING DONE")
    end
    
    
    # Private lanes
    
    private_lane :bump_build_number do
        new_build_number = increment_build_number(xcodeproj: ENV["XCODE_PROJECT"])
        UI.message("Build: #{new_build_number}")
        commit_version_bump(
                            message: "Build number: #{new_build_number}",
                            xcodeproj: ENV["XCODE_PROJECT"]
                            )
    end
    
    
    desc "Checkout latest dependencies as declared in Cartfile.resolved"
    private_lane :update_graph do
        carthage(
                 command: "update",
                 platform: "iOS",
                 use_submodules: true,
                 use_ssh: true,
                 use_binaries: false,
                 no_build: true
                 )
        update_dependency_graph()
    end
    
    lane :update_app_icon do
        appicon(
                appicon_image_file: 'fastlane/metadata/RedBee-1024.png',
                appicon_devices: [:ipad, :iphone, :ios_marketing],
                appicon_path: 'iOSReferenceApp/Assets.xcassets'
                )
                
        # get the list of files that have actually changed in our git workdir
        git_dirty_files = Actions.sh('git diff --name-only HEAD').split("\n") + Actions.sh('git ls-files --other --exclude-standard').split("\n")
                
        icon_files = "iOSReferenceApp/Assets.xcassets"
                
        asset_files_changed = git_dirty_files.select { |i| i.start_with?(icon_files) }
        
        valid_changed_files = Array.new(asset_files_changed)
        
        changed_files_as_expected = (Set.new(git_dirty_files.map(&:downcase)) == Set.new(valid_changed_files.map(&:downcase)))
        unless changed_files_as_expected
            unexpected_files_changed = Set.new(git_dirty_files.map(&:downcase)) - Set.new(valid_changed_files.map(&:downcase))
            error = [
                "Found unexpected uncommited changes in the working directory.",
                "The following files not related to App Icons:",
                "#{unexpected_files_changed.join("\n")}",
                "Make sure you have a clean working directory",
            ].join("\n")
            UI.user_error!(error)
            UI.error(error)
        end
        
        # make sure we have valid changes before we run git commands
        unless valid_changed_files.empty?
            # get the absolute paths to the files
            git_add_paths = valid_changed_files.map do |path|
                updated = path.gsub("$(SRCROOT)", ".").gsub("${SRCROOT}", ".")
                File.expand_path(File.join(repo_pathname, updated))
            end
            
            # then create a commit with a message
            Actions.sh("git add #{git_add_paths.map(&:shellescape).join(' ')}")
            
            begin
                # TODO: Find version + build number for each submodule and include that in the commit message
                module_names = submodule_changes.map{|x| x.gsub(submodule_directory,"")}.join(" ")
                message = "AppIcon updated"
                
                Actions.sh("git commit -m '#{message}'")
                
                UI.success("Committed \"#{message}\" ðŸ’¾.")
                rescue => ex
                UI.error(ex)
                UI.important("Didn't commit any changes.")
            end
        end
    end
    
    
    lane :testflight_beta do
        cert
        sigh
        
        gym(
            export_method: "app-store",
            export_options: {
                provisioningProfiles: {
                    "com.emp.iOSReferenceApp" => "com.emp.iOSReferenceApp AppStore 1495113163"
                }
            },
            export_xcargs: "-allowProvisioningUpdates",
            workspace: ENV["CLIENT_WORKSPACE"],
            scheme: ENV["TESTFLIGHT_SCHEME"]
            )
            
        changelog = changelog_from_git_commits(
                                               commits_count: 10,
                                               pretty: 'â€¢ %s',
                                               merge_commit_filtering: 'exclude_merges'
                                               )
        pilot(
              changelog: strip_emoji(changelog),
              distribute_external: true,
              groups: "BetaGroup"
              )
        
        notify_slack_new_testflight
    end
    
    desc "Posts a success notification for development integration"
    desc "in the Players channel on Slack"
    lane :notify_slack_dev_success do
        current_build_number = get_build_number
        current_time = Time.now.to_f
        project_name = ENV["PROJECT_TITLE"]
        
        changelog = changelog_from_git_commits(
                                               commits_count: 10,
                                               pretty: 'â€¢ %s',
                                               merge_commit_filtering: 'exclude_merges'
                                               )
        UI.message(current_time)
        slack(
              use_webhook_configured_username_and_icon: true,
              default_payloads: [],
              attachment_properties: {
                    pretext: "#{project_name} build #{current_build_number} succesful!",
                    color: "good",
                    text: strip_emoji(changelog),
                    footer: ENV["DEV_TEAM_NAME"],
                    ts: current_time,
                }
              )
    end
    
    private_lane :notify_slack_new_testflight do
        current_build_number = get_build_number
        current_time = Time.now.to_f
        
        slack(
              use_webhook_configured_username_and_icon: true,
              default_payloads: [],
                    attachment_properties: {
                    pretext: "Build #{current_build_number} in flight!",
                    color: "good",
                    text: "Available through TestFlight once processed by iTunesConnect",
                    footer: ENV["DEV_TEAM_NAME"],
                    ts: current_time,
                }
              )
    end
    
    after_all do |lane|
        # This block is called, only if the executed lane was successful
        
    end
    
    error do |lane, exception|
        UI.error("====> #{exception.message}")
        slack(
              message: exception.message,
              success: false
              )
              
        UI.error("====> ERROR")
    end

    def strip_emoji( str )
        str = str.force_encoding('utf-8').encode
        clean_text = str.each_char.select { |char| char.bytesize < 4 }.join.squeeze(' ')
    end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
